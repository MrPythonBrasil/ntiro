from time import localtime, strftime, sleep
from colorama import init, Fore
import requests
import random
import string
import os

# Inicializa o colorama
init(autoreset=True)

# Fun√ß√£o para gerar um c√≥digo aleat√≥rio baseado no tipo
def generate_code(code_type):
    if code_type == "boost":
        return "".join(random.choices(string.ascii_letters + string.digits, k=24))
    else:
        return "".join(random.choices(string.ascii_letters + string.digits, k=16))

# Fun√ß√£o para exibir uma mensagem de boas-vindas com t√≠tulo "NITRO"
def print_welcome_message():
    print(Fore.WHITE + """
  NNN   NNN III  TTTTT  RRRRR   OOO
  NNNN  NNN  I     T    R   R  O   O
  NN NN NNN  I     T    RRRRR  O   O
  NN  NNNNN  I     T    R  R   O   O
  NN   NNNN  III    T    R   R   OOO
    """)
    print(Fore.WHITE + "\nVamos l√°, n√£o temos todo o tempo do mundo. Escolha o que voc√™ quer fazer.\n")

# Fun√ß√£o para verificar o status do c√≥digo
def verify_code(code, proxies=None):
    url = f"https://discordapp.com/api/entitlements/gift-codes/{code}"
    try:
        response = requests.get(url, proxies=proxies, timeout=10)
        if response.status_code == 200:
            return "C√≥digo V√°lido. Surpreso?", Fore.GREEN
        elif response.status_code == 404:
            return "In√∫til. Isso nunca vai funcionar.", Fore.RED
        elif response.status_code == 429:
            return "Taxa Limitada. Voc√™ j√° est√° tentando demais. Tente mais tarde.", Fore.YELLOW
        else:
            return "Erro. N√£o √© como se voc√™ soubesse o que fazer, n√©?", Fore.WHITE
    except Exception as e:
        return f"Erro ao verificar o c√≥digo. Surpreso? N√£o sou. {str(e)}", Fore.WHITE

# Fun√ß√£o principal para gerenciar a entrada e exibi√ß√£o de c√≥digos
def run_code_generator():
    while True:
        print_welcome_message()

        # Tipo de c√≥digo
        code_type = input(Fore.WHITE + "Tipo de c√≥digo? (Escolha 'boost' ou 'classic', se souber o que est√° fazendo): ").strip().lower()
        if code_type not in ["boost", "classic"]:
            print(Fore.WHITE + "S√©rio? √â simples. Escolha 'boost' ou 'classic'. Vamos l√°. ü§¶‚Äç‚ôÇÔ∏è")
            continue

        # Usar proxies
        use_proxies = input(Fore.WHITE + "Vai usar proxies? (Sim / N√£o): ").strip().lower()
        proxies = None
        if use_proxies == "sim":
            proxies = input(Fore.WHITE + "Voc√™ realmente acha que sabe o que est√° fazendo com proxies? (Digite o proxy): ").strip()
            if proxies:
                proxies = {"http": proxies}
            else:
                proxies = None

        # N√∫mero de c√≥digos
        try:
            num_codes = int(input(Fore.WHITE + "Quantos c√≥digos voc√™ acha que vai conseguir gerar? (Digite um n√∫mero): "))

            if num_codes <= 0:
                print(Fore.WHITE + "Sem c√≥digos? Claro, sem problemas. N√£o vou me importar. üòí")
                continue
        except ValueError:
            print(Fore.WHITE + "Ei, voc√™ n√£o sabe o que √© um n√∫mero? Digite um n√∫mero v√°lido. üòè")
            continue

        # Gerando e verificando os c√≥digos
        print(Fore.WHITE + f"\nGerando {num_codes} c√≥digos... Isso vai ser r√°pido, mas voc√™ pode se surpreender. üòè\n")
        for _ in range(num_codes):
            code = generate_code(code_type)
            status, color = verify_code(code, proxies)
            print(color + f"C√≥digo gerado: {code} | Status: {status}")
            if color == Fore.GREEN:
                with open("valid_codes.txt", "a") as valid_file:
                    valid_file.write(f"{code}\n")
                    print(Fore.GREEN + f"Uau, um c√≥digo v√°lido... O que mais voc√™ esperava? Adicionado ao 'valid_codes.txt'.\n")
            sleep(1)

        # Perguntar se o usu√°rio quer gerar mais c√≥digos
        repeat = input(Fore.WHITE + "\nQuer gerar mais c√≥digos? (Sim / N√£o): ").strip().lower()
        if repeat != "sim":
            print(Fore.WHITE + "Ent√£o voc√™ j√° cansou, n√©? Tchau. üëã N√£o vai fazer falta.")
            break

if __name__ == "__main__":
    run_code_generator()
